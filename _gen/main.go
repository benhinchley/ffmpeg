package main

import (
	"bufio"
	"bytes"
	"flag"
	"fmt"
	"io/ioutil"
	"os/exec"
	"regexp"
	"strings"
	"text/template"
	"time"

	"github.com/pinzolo/casee"
)

var regexpOption = regexp.MustCompile(`[A-Z.]{1,6}\s+([0-9a-z_]+)\s+(.*)`)

type option struct {
	Name string
	Desc string
}

// formats
// codecs
// pixel formats

func main() {
	opt := flag.String("option", "", "formats, codecs, pix_fmts")
	flag.Parse()

	var running string
	for _, o := range []string{"formats", "codecs", "pix_fmts"} {
		if *opt == o {
			running = *opt
		}
	}

	var name string
	if running == "" {
		panic("provided invalid option")
	} else if running == "formats" {
		name = "FileFormat"
	} else if running == "codecs" {
		name = "Codec"
	} else if running == "pix_fmts" {
		name = "PixelFormat"
	}

	cmd := exec.Command("ffmpeg", "-hide_banner", "-"+running)
	out, err := cmd.StdoutPipe()
	if err != nil {
		panic(fmt.Errorf("unable to get stdout pipe for command: %v", err))
	}

	r := bufio.NewScanner(out)
	opts := []*option{}

	if err := cmd.Start(); err != nil {
		panic(fmt.Errorf("unable to start command: %v", err))
	}

	for r.Scan() {
		line := strings.TrimSpace(r.Text())
		if regexpOption.MatchString(line) {
			matches := regexpOption.FindAllStringSubmatch(line, -1)
			opts = append(opts, &option{
				Name: matches[0][1],
				Desc: matches[0][2],
			})
		}
	}

	if err := cmd.Wait(); err != nil {
		panic(fmt.Errorf("unable to wait for command to finish: %v", err))
	}

	t := struct {
		Timestamp time.Time
		TypeName  string
		Options   []*option
	}{
		Timestamp: time.Now(),
		TypeName:  casee.ToPascalCase(name),
		Options:   opts,
	}

	tmpl, err := template.New("ffmpeg type").Funcs(template.FuncMap{
		"pascal": casee.ToPascalCase,
	}).Parse(strings.TrimSpace(typeTemplate))
	if err != nil {
		panic(fmt.Errorf("unable to create template: %v", err))
	}

	var contents bytes.Buffer
	tmpl.Execute(&contents, t)
	if err := ioutil.WriteFile(casee.ToSnakeCase(name)+".go", contents.Bytes(), 0777); err != nil {
		panic(fmt.Errorf("unable to execute template: %v", err))
	}
}

var typeTemplate = `
{{- $Type := .TypeName -}}
// Code generated by go generate; DO NOT EDIT.
// This code was generated by robots at
// {{.Timestamp}}

package ffmpeg

type {{$Type}} int

const (
	{{- range $i, $elem := .Options}}
	{{- if eq $i 0}}
	{{$Type}}{{pascal $elem.Name}} {{$Type}} = iota // {{$elem.Desc}}
	{{- else}}
	{{$Type}}{{pascal $elem.Name}} // {{$elem.Desc}}
	{{- end}}
	{{- end}}
)

func (typ {{$Type}}) String() string {
	switch typ {
	{{- range .Options}}
	case {{$Type}}{{pascal .Name}}:
		return "{{.Name}}"
	{{- end}}
	}
	return ""
}
`
